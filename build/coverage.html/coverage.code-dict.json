{"/home/travis/build/npmtest/node-npmtest-jira/test.js":"/* istanbul instrument in package npmtest_jira */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-jira/lib.npmtest_jira.js":"/* istanbul instrument in package npmtest_jira */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_jira = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_jira = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-jira/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-jira && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_jira */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_jira\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_jira.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_jira.rollup.js'] =\n            local.assetsDict['/assets.npmtest_jira.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_jira.__dirname + '/lib.npmtest_jira.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-jira/node_modules/jira/lib/jira.js":"// # JavaScript JIRA API for node.js #\n//\n// [![Build Status](https://travis-ci.org/steves/node-jira.png?branch=master)](https://travis-ci.org/steves/node-jira)\n//\n// A node.js module, which provides an object oriented wrapper for the JIRA REST API.\n//\n// This library is built to support version `2.0.alpha1` of the JIRA REST API.\n// This library is also tested with version `2` of the JIRA REST API\n//   It has been noted that with Jira OnDemand, `2.0.alpha1` does not work, devs\n//   should revert to `2`. If this changes, please notify us.\n//\n// JIRA REST API documentation can be found [here](http://docs.atlassian.com/jira/REST/latest/)\n//\n// ## Installation ##\n//\n//   Install with the node package manager [npm](http://npmjs.org):\n//\n//     $ npm install jira\n//\n// or\n//\n//   Install via git clone:\n//\n//     $ git clone git://github.com/steves/node-jira.git\n//     $ cd node-jira\n//     $ npm install\n//\n// ## Example ##\n//\n// Find the status of an issue.\n//\n//     JiraApi = require('jira').JiraApi;\n//\n//     var jira = new JiraApi('https', config.host, config.port, config.user, config.password, '2.0.alpha1');\n//     jira.findIssue(issueNumber, function(error, issue) {\n//         console.log('Status: ' + issue.fields.status.name);\n//     });\n//\n// Currently there is no explicit login call necessary as each API call uses Basic Authentication to authenticate.\n//\n// ## Options ##\n//\n// JiraApi options:\n// *  `protocol<string>`: Typically 'http:' or 'https:'\n// *  `host<string>`: The hostname for your jira server\n// *  `port<int>`: The port your jira server is listening on (probably `80` or `443`)\n// *  `user<string>`: The username to log in with\n// *  `password<string>`: Keep it secret, keep it safe\n// *  `Jira API Version<string>`: Known to work with `2` and `2.0.alpha1`\n// *  `verbose<bool>`: Log some info to the console, usually for debugging\n// *  `strictSSL<bool>`: Set to false if you have self-signed certs or something non-trustworthy\n// * `oauth`: A dictionary of `consumer_key`, `consumer_secret`, `access_token` and `access_token_secret` to be used for OAuth authentication.\n//\n// ## Implemented APIs ##\n//\n// *  Authentication\n//   *  HTTP\n//   *  OAuth\n// *  Projects\n//   *  Pulling a project\n//   *  List all projects viewable to the user\n//   *  List Components\n//   *  List Fields\n//   *  List Priorities\n// *  Versions\n//   *  Pulling versions\n//   *  Adding a new version\n//   *  Pulling unresolved issues count for a specific version\n// *  Rapid Views\n//   *  Find based on project name\n//   *  Get the latest Green Hopper sprint\n//   *  Gets attached issues\n// *  Issues\n//   *  Add a new issue\n//   *  Update an issue\n//   *  Transition an issue\n//   *  Pulling an issue\n//   *  Issue linking\n//   *  Add an issue to a sprint\n//   *  Get a users issues (open or all)\n//   *  List issue types\n//   *  Search using jql\n//     *  Set Max Results\n//     *  Set Start-At parameter for results\n//   *  Add a worklog\n//   *  Add new estimate for worklog\n//   *  Add a comment\n// *  Transitions\n//   *  List\n// *  Users\n//   *  Search\n//\n// ## TODO ##\n//\n// *  Refactor currently implemented APIs to be more Object Oriented\n// *  Refactor to make use of built-in node.js events and classes\n//\n// ## Changelog ##\n//\n//\n// *  _0.9.0 Add OAuth Support and New Estimates on addWorklog (thanks to\n//    [nagyv](https://github.com/nagyv))_\n// *  _0.8.2 Fix URL Format Issues (thanks to\n//         [eduardolundgren](https://github.com/eduardolundgren))_\n// *  _0.8.1 Expanding the transitions options (thanks to\n//         [eduardolundgren](https://github.com/eduardolundgren))_\n// *  _0.8.0 Ability to search users (thanks to\n//         [eduardolundgren](https://github.com/eduardolundgren))_\n// *  _0.7.2 Allows HTTP Code 204 on issue update edit (thanks to\n//         [eduardolundgren](https://github.com/eduardolundgren))_\n// *  _0.7.1 Check if body variable is undef (thanks to\n//         [AlexCline](https://github.com/AlexCline))_\n// *  _0.7.0 Adds list priorities, list fields, and project components (thanks to\n//         [eduardolundgren](https://github.com/eduardolundgren))_\n// *  _0.6.0 Comment API implemented (thanks to [StevenMcD](https://github.com/StevenMcD))_\n// *  _0.5.0 Last param is now for strict SSL checking, defaults to true_\n// *  _0.4.1 Now handing errors in the request callback (thanks [mrbrookman](https://github.com/mrbrookman))_\n// *  _0.4.0 Now auto-redirecting between http and https (for both GET and POST)_\n// *  _0.3.1 [Request](https://github.com/mikeal/request) is broken, setting max request package at 2.15.0_\n// *  _0.3.0 Now Gets Issues for a Rapidview/Sprint (thanks [donbonifacio](https://github.com/donbonifacio))_\n// *  _0.2.0 Now allowing startAt and MaxResults to be passed to searchJira,\n//    switching to semantic versioning._\n// *  _0.1.0 Using Basic Auth instead of cookies, all calls unit tested, URI\n//    creation refactored_\n// *  _0.0.6 Now linting, preparing to refactor_\n// *  _0.0.5 JQL search now takes a list of fields_\n// *  _0.0.4 Added jql search_\n// *  _0.0.3 Added APIs and Docco documentation_\n// *  _0.0.2 Initial version_\nvar url = require('url'),\n    logger = console,\n    OAuth = require(\"oauth\");\n\n\nvar JiraApi = exports.JiraApi = function(protocol, host, port, username, password, apiVersion, verbose, strictSSL, oauth) {\n    this.protocol = protocol;\n    this.host = host;\n    this.port = port;\n    this.username = username;\n    this.password = password;\n    this.apiVersion = apiVersion;\n    // Default strictSSL to true (previous behavior) but now allow it to be\n    // modified\n    if (strictSSL == null) {\n        strictSSL = true;\n    }\n    this.strictSSL = strictSSL;\n    // This is so we can fake during unit tests\n    this.request = require('request');\n    if (verbose !== true) { logger = { log: function() {} }; }\n\n    // This is the same almost every time, refactored to make changing it\n    // later, easier\n    this.makeUri = function(pathname, altBase, altApiVersion) {\n        var basePath = 'rest/api/';\n        if (altBase != null) {\n            basePath = altBase;\n        }\n\n        var apiVersion = this.apiVersion;\n        if (altApiVersion != null) {\n          apiVersion = altApiVersion;\n        }\n\n        var uri = url.format({\n            protocol: this.protocol,\n            hostname: this.host,\n            port: this.port,\n            pathname: basePath + apiVersion + pathname\n        });\n        return decodeURIComponent(uri);\n    };\n\n    this.doRequest = function(options, callback) {\n        if(oauth && oauth.consumer_key && oauth.consumer_secret) {\n          options.oauth = {\n            consumer_key: oauth.consumer_key,\n            consumer_secret: oauth.consumer_secret,\n            token: oauth.access_token,\n            token_secret: oauth.access_token_secret\n          };\n        } else {\n          options.auth = {\n            'user': this.username,\n            'pass': this.password\n          };\n        }\n        this.request(options, callback);\n    };\n\n};\n\n(function() {\n    // ## Find an issue in jira ##\n    // ### Takes ###\n    //\n    // *  issueNumber: the issueNumber to find\n    // *  callback: for when it's done\n    //\n    // ### Returns ###\n    //\n    // *  error: string of the error\n    // *  issue: an object of the issue\n    //\n    // [Jira Doc](http://docs.atlassian.com/jira/REST/latest/#id290709)\n    this.findIssue = function(issueNumber, callback) {\n\n        var options = {\n            rejectUnauthorized: this.strictSSL,\n            uri: this.makeUri('/issue/' + issueNumber),\n            method: 'GET'\n        };\n\n        this.doRequest(options, function(error, response, body) {\n\n            if (error) {\n                callback(error, null);\n                return;\n            }\n\n            if (response.statusCode === 404) {\n                callback('Invalid issue number.');\n                return;\n            }\n\n            if (response.statusCode !== 200) {\n                callback(response.statusCode + ': Unable to connect to JIRA during findIssueStatus.');\n                return;\n            }\n\n            if (body === undefined) {\n                callback('Response body was undefined.');\n                return;\n            }\n\n            callback(null, JSON.parse(body));\n\n        });\n    };\n\n    // ## Get the unresolved issue count ##\n    // ### Takes ###\n    //\n    // *  version: version of your product that you want issues against\n    // *  callback: function for when it's done\n    //\n    // ### Returns ###\n    // *  error: string with the error code\n    // *  count: count of unresolved issues for requested version\n    //\n    // [Jira Doc](http://docs.atlassian.com/jira/REST/latest/#id288524)\n    this.getUnresolvedIssueCount = function(version, callback) {\n        var options = {\n            rejectUnauthorized: this.strictSSL,\n            uri: this.makeUri('/version/' + version + '/unresolvedIssueCount'),\n            method: 'GET'\n        };\n\n        this.doRequest(options, function(error, response, body) {\n\n            if (error) {\n                callback(error, null);\n                return;\n            }\n\n            if (response.statusCode === 404) {\n                callback('Invalid version.');\n                return;\n            }\n\n            if (response.statusCode !== 200) {\n                callback(response.statusCode + ': Unable to connect to JIRA during findIssueStatus.');\n                return;\n            }\n\n            body = JSON.parse(body);\n            callback(null, body.issuesUnresolvedCount);\n\n        });\n    };\n\n    // ## Get the Project by project key ##\n    // ### Takes ###\n    //\n    // *  project: key for the project\n    // *  callback: for when it's done\n    //\n    // ### Returns ###\n    // *  error: string of the error\n    // *  project: the json object representing the entire project\n    //\n    // [Jira Doc](http://docs.atlassian.com/jira/REST/latest/#id289232)\n    this.getProject = function(project, callback) {\n\n        var options = {\n            rejectUnauthorized: this.strictSSL,\n            uri: this.makeUri('/project/' + project),\n            method: 'GET'\n        };\n\n        this.doRequest(options, function(error, response, body) {\n\n            if (error) {\n                callback(error, null);\n                return;\n            }\n\n            if (response.statusCode === 404) {\n                callback('Invalid project.');\n                return;\n            }\n\n            if (response.statusCode !== 200) {\n                callback(response.statusCode + ': Unable to connect to JIRA during getProject.');\n                return;\n            }\n\n            body = JSON.parse(body);\n            callback(null, body);\n\n        });\n    };\n\n    // ## Find the Rapid View for a specified project ##\n    // ### Takes ###\n    //\n    // *  projectName: name for the project\n    // *  callback: for when it's done\n    //\n    // ### Returns ###\n    // *  error: string of the error\n    // *  rapidView: rapid view matching the projectName\n\n    /**\n     * Finds the Rapid View that belongs to a specified project.\n     *\n     * @param projectName\n     * @param callback\n     */\n    this.findRapidView = function(projectName, callback) {\n\n        var options = {\n          rejectUnauthorized: this.strictSSL,\n          uri: this.makeUri('/rapidviews/list', 'rest/greenhopper/'),\n          method: 'GET',\n          json: true\n        };\n\n        this.doRequest(options, function(error, response) {\n\n          if (error) {\n              callback(error, null);\n              return;\n          }\n\n          if (response.statusCode === 404) {\n            callback('Invalid URL');\n            return;\n          }\n\n          if (response.statusCode !== 200) {\n            callback(response.statusCode + ': Unable to connect to JIRA during rapidView search.');\n            return;\n          }\n\n          if (response.body !== null) {\n            var rapidViews = response.body.views;\n            for (var i = 0; i < rapidViews.length; i++) {\n              if(rapidViews[i].name.toLowerCase() === projectName.toLowerCase()) {\n                callback(null, rapidViews[i]);\n                return;\n              }\n            }\n          }\n\n      });\n    };\n\n    // ## Get a list of Sprints belonging to a Rapid View ##\n    // ### Takes ###\n    //\n    // *  rapidViewId: the id for the rapid view\n    // *  callback: for when it's done\n    //\n    // ### Returns ###\n    //\n    // *  error: string with the error\n    // *  sprints: the ?array? of sprints\n    /**\n     * Returns a list of sprints belonging to a Rapid View.\n     *\n     * @param rapidViewId\n     * @param callback\n     */\n    this.getLastSprintForRapidView = function(rapidViewId, callback) {\n\n        var options = {\n          rejectUnauthorized: this.strictSSL,\n          uri: this.makeUri('/sprintquery/' + rapidViewId, 'rest/greenhopper/'),\n          method: 'GET',\n          json:true\n        };\n\n        this.doRequest(options, function(error, response) {\n\n          if (error) {\n              callback(error, null);\n              return;\n          }\n\n          if (response.statusCode === 404) {\n            callback('Invalid URL');\n            return;\n          }\n\n          if (response.statusCode !== 200) {\n            callback(response.statusCode + ': Unable to connect to JIRA during sprints search.');\n            return;\n          }\n\n          if (response.body !== null) {\n            var sprints = response.body.sprints;\n            callback(null, sprints.pop());\n            return;\n          }\n\n        });\n    };\n\n    // ## Get the issues for a rapidView / sprint##\n    // ### Takes ###\n    //\n    // *  rapidViewId: the id for the rapid view\n    // *  sprintId: the id for the sprint\n    // *  callback: for when it's done\n    //\n    // ### Returns ###\n    //\n    // *  error: string with the error\n    // *  results: the object with the issues and additional sprint information\n    /**\n     * Returns sprint and issues information\n     *\n     * @param rapidViewId\n     * @param sprintId\n     * @param callback\n     */\n    this.getSprintIssues = function getSprintIssues(rapidViewId, sprintId, callback) {\n\n      var options = {\n        rejectUnauthorized: this.strictSSL,\n        uri: this.makeUri('/rapid/charts/sprintreport?rapidViewId=' + rapidViewId + '&sprintId=' + sprintId, 'rest/greenhopper/'),\n        method: 'GET',\n        json: true\n      };\n\n      this.doRequest(options, function(error, response) {\n\n        if (error) {\n            callback(error, null);\n            return;\n        }\n\n        if( response.statusCode === 404 ) {\n          callback('Invalid URL');\n          return;\n        }\n\n        if( response.statusCode !== 200 ) {\n          callback(response.statusCode + ': Unable to connect to JIRA during sprints search');\n          return;\n        }\n\n        if(response.body !== null) {\n          callback(null, response.body);\n        } else {\n          callback('No body');\n        }\n\n      });\n\n    };\n\n    // ## Add an issue to the project's current sprint ##\n    // ### Takes ###\n    //\n    // *  issueId: the id of the existing issue\n    // *  sprintId: the id of the sprint to add it to\n    // *  callback: for when it's done\n    //\n    // ### Returns ###\n    //\n    // *  error: string of the error\n    //\n    //\n    // **does this callback if there's success?**\n    /**\n     * Adds a given issue to a project's current sprint\n     *\n     * @param issueId\n     * @param sprintId\n     * @param callback\n     */\n    this.addIssueToSprint = function(issueId, sprintId, callback) {\n\n        var options = {\n          rejectUnauthorized: this.strictSSL,\n          uri: this.makeUri('/sprint/' + sprintId + '/issues/add', 'rest/greenhopper/'),\n          method: 'PUT',\n          followAllRedirects: true,\n          json:true,\n          body: {\n            issueKeys: [issueId]\n          }\n        };\n\n        logger.log(options.uri);\n\n        this.doRequest(options, function(error, response) {\n\n          if (error) {\n              callback(error, null);\n              return;\n          }\n\n          if (response.statusCode === 404) {\n            callback('Invalid URL');\n            return;\n          }\n\n          if (response.statusCode !== 204) {\n            callback(response.statusCode + ': Unable to connect to JIRA to add to sprint.');\n            return;\n          }\n\n        });\n    };\n\n    // ## Create an issue link between two issues ##\n    // ### Takes ###\n    //\n    // *  link: a link object\n    // *  callback: for when it's done\n    //\n    // ### Returns ###\n    // *  error: string if there was an issue, null if success\n    //\n    // [Jira Doc](http://docs.atlassian.com/jira/REST/latest/#id296682)\n    /**\n     * Creates an issue link between two issues. Link should follow the below format:\n     *\n     * {\n     *   'linkType': 'Duplicate',\n     *   'fromIssueKey': 'HSP-1',\n     *   'toIssueKey': 'MKY-1',\n     *   'comment': {\n     *     'body': 'Linked related issue!',\n     *     'visibility': {\n     *       'type': 'GROUP',\n     *       'value': 'jira-users'\n     *     }\n     *   }\n     * }\n     *\n     * @param link\n     * @param callback\n     */\n    this.issueLink = function(link, callback) {\n\n        var options = {\n            rejectUnauthorized: this.strictSSL,\n            uri: this.makeUri('/issueLink'),\n            method: 'POST',\n            followAllRedirects: true,\n            json: true,\n            body: link\n        };\n\n        this.doRequest(options, function(error, response) {\n\n            if (error) {\n                callback(error, null);\n                return;\n            }\n\n            if (response.statusCode === 404) {\n                callback('Invalid project.');\n                return;\n            }\n\n            if (response.statusCode !== 200) {\n                callback(response.statusCode + ': Unable to connect to JIRA during issueLink.');\n                return;\n            }\n\n            callback(null);\n\n        });\n    };\n\n    // ## Get Versions for a project ##\n    // ### Takes ###\n    // *  project: A project key\n    // *  callback: for when it's done\n    //\n    // ### Returns ###\n    // *  error: a string with the error\n    // *  versions: array of the versions for a product\n    //\n    // [Jira Doc](http://docs.atlassian.com/jira/REST/latest/#id289653)\n    this.getVersions = function(project, callback) {\n\n        var options = {\n            rejectUnauthorized: this.strictSSL,\n            uri: this.makeUri('/project/' + project + '/versions'),\n            method: 'GET'\n        };\n\n        this.doRequest(options, function(error, response, body) {\n\n            if (error) {\n                callback(error, null);\n                return;\n            }\n\n            if (response.statusCode === 404) {\n                callback('Invalid project.');\n                return;\n            }\n\n            if (response.statusCode !== 200) {\n                callback(response.statusCode + ': Unable to connect to JIRA during getVersions.');\n                return;\n            }\n\n            body = JSON.parse(body);\n            callback(null, body);\n\n        });\n    };\n\n    // ## Create a version ##\n    // ### Takes ###\n    //\n    // *  version: an object of the new version\n    // *  callback: for when it's done\n    //\n    // ### Returns ###\n    //\n    // *  error: error text\n    // *  version: should be the same version you passed up\n    //\n    // [Jira Doc](http://docs.atlassian.com/jira/REST/latest/#id288232)\n    //\n    /* {\n     *    \"description\": \"An excellent version\",\n     *    \"name\": \"New Version 1\",\n     *    \"archived\": false,\n     *    \"released\": true,\n     *    \"releaseDate\": \"2010-07-05\",\n     *    \"userReleaseDate\": \"5/Jul/2010\",\n     *    \"project\": \"PXA\"\n     * }\n     */\n    this.createVersion = function(version, callback) {\n\n        var options = {\n            rejectUnauthorized: this.strictSSL,\n            uri: this.makeUri('/version'),\n            method: 'POST',\n            followAllRedirects: true,\n            json: true,\n            body: version\n        };\n        this.doRequest(options, function(error, response, body) {\n\n            if (error) {\n                callback(error, null);\n                return;\n            }\n\n            if (response.statusCode === 404) {\n                callback('Version does not exist or the currently authenticated user does not have permission to view it');\n                return;\n            }\n\n            if (response.statusCode === 403) {\n                callback('The currently authenticated user does not have permission to edit the version');\n                return;\n            }\n\n            if (response.statusCode !== 201) {\n                callback(response.statusCode + ': Unable to connect to JIRA during createVersion.');\n                return;\n            }\n\n            callback(null, body);\n\n        });\n    };\n\n    // ## Update a version ##\n    // ### Takes ###\n    //\n    // *  version: an object of the new version\n    // *  callback: for when it's done\n    //\n    // ### Returns ###\n    //\n    // *  error: error text\n    // *  version: should be the same version you passed up\n    //\n    // [Jira Doc](https://docs.atlassian.com/jira/REST/latest/#d2e510)\n    //\n    /* {\n     *    \"id\": The ID of the version being updated. Required.\n     *    \"description\": \"An excellent version\",\n     *    \"name\": \"New Version 1\",\n     *    \"archived\": false,\n     *    \"released\": true,\n     *    \"releaseDate\": \"2010-07-05\",\n     *    \"userReleaseDate\": \"5/Jul/2010\",\n     *    \"project\": \"PXA\"\n     * }\n     */\n    this.updateVersion = function(version, callback) {\n        var options = {\n            rejectUnauthorized: this.strictSSL,\n            uri: this.makeUri('/version/'+version.id),\n            method: 'PUT',\n            followAllRedirects: true,\n            json: true,\n            body: version\n        };\n\n        this.doRequest(options, function(error, response, body) {\n\n            if (error) {\n                callback(error, null);\n                return;\n            }\n\n            if (response.statusCode === 404) {\n                callback('Version does not exist or the currently authenticated user does not have permission to view it');\n                return;\n            }\n\n            if (response.statusCode === 403) {\n                callback('The currently authenticated user does not have permission to edit the version');\n                return;\n            }\n\n            if (response.statusCode !== 200) {\n                callback(response.statusCode + ': Unable to connect to JIRA during updateVersion.');\n                return;\n            }\n\n            callback(null, body);\n\n        });\n    };\n\n    // ## Pass a search query to Jira ##\n    // ### Takes ###\n    //\n    // *  searchString: jira query string\n    // *  optional: object containing any of the following properties\n    //   *  startAt: optional index number (default 0)\n    //   *  maxResults: optional max results number (default 50)\n    //   *  fields: optional array of desired fields, defaults when null:\n    //     *  \"summary\"\n    //     *  \"status\"\n    //     *  \"assignee\"\n    //     *  \"description\"\n    // *  callback: for when it's done\n    //\n    // ### Returns ###\n    //\n    // *  error: string if there's an error\n    // *  issues: array of issues for the user\n    //\n    // [Jira Doc](http://docs.atlassian.com/jira/REST/latest/#id333082)\n    this.searchJira = function(searchString, optional, callback) {\n        // backwards compatibility\n        optional = optional || {};\n        if (Array.isArray(optional)) {\n            optional = { fields: optional };\n        }\n\n        var options = {\n            rejectUnauthorized: this.strictSSL,\n            uri: this.makeUri('/search'),\n            method: 'POST',\n            json: true,\n            followAllRedirects: true,\n            body: {\n                jql: searchString,\n                startAt: optional.startAt || 0,\n                maxResults: optional.maxResults || 50,\n                fields: optional.fields || [\"summary\", \"status\", \"assignee\", \"description\"]\n            }\n        };\n\n        this.doRequest(options, function(error, response, body) {\n\n            if (error) {\n                callback(error, null);\n                return;\n            }\n\n            if (response.statusCode === 400) {\n                callback('Problem with the JQL query');\n                return;\n            }\n\n            if (response.statusCode !== 200) {\n                callback(response.statusCode + ': Unable to connect to JIRA during search.');\n                return;\n            }\n\n            callback(null, body);\n\n        });\n    };\n\n    // ## Search user on Jira ##\n    // ### Takes ###\n    //\n    // username: A query string used to search username, name or e-mail address\n    // startAt: The index of the first user to return (0-based)\n    // maxResults: The maximum number of users to return (defaults to 50).\n    // includeActive: If true, then active users are included in the results (default true)\n    // includeInactive: If true, then inactive users are included in the results (default false)\n    // *  callback: for when it's done\n    //\n    // ### Returns ###\n    //\n    // *  error: string if there's an error\n    // *  users: array of users for the user\n    //\n    // [Jira Doc](http://docs.atlassian.com/jira/REST/latest/#d2e3756)\n    //\n    this.searchUsers = function(username, startAt, maxResults, includeActive, includeInactive, callback) {\n        startAt = (startAt !== undefined) ? startAt : 0;\n        maxResults = (maxResults !== undefined) ? maxResults : 50;\n        includeActive = (includeActive !== undefined) ? includeActive : true;\n        includeInactive = (includeInactive !== undefined) ? includeInactive : false;\n\n        var options = {\n            rejectUnauthorized: this.strictSSL,\n            uri: this.makeUri(\n                '/user/search?username=' + username +\n                '&startAt=' + startAt +\n                '&maxResults=' + maxResults +\n                '&includeActive=' + includeActive +\n                '&includeInactive=' + includeInactive),\n            method: 'GET',\n            json: true,\n            followAllRedirects: true\n        };\n\n        this.doRequest(options, function(error, response, body) {\n\n            if (error) {\n                callback(error, null);\n                return;\n            }\n\n            if (response.statusCode === 400) {\n                callback('Unable to search');\n                return;\n            }\n\n            if (response.statusCode !== 200) {\n                callback(response.statusCode + ': Unable to connect to JIRA during search.');\n                return;\n            }\n\n            callback(null, body);\n\n        });\n    };\n\n    // ## Get issues related to a user ##\n    // ### Takes ###\n    //\n    // *  user: username of user to search for\n    // *  open: `boolean` determines if only open issues should be returned\n    // *  callback: for when it's done\n    //\n    // ### Returns ###\n    //\n    // *  error: string if there's an error\n    // *  issues: array of issues for the user\n    //\n    // [Jira Doc](http://docs.atlassian.com/jira/REST/latest/#id296043)\n    //\n    this.getUsersIssues = function(username, open, callback) {\n        if (username.indexOf(\"@\") > -1) {\n            username = username.replace(\"@\", '\\\\u0040');\n        }\n        var jql = \"assignee = \" + username;\n        var openText = ' AND status in (Open, \"In Progress\", Reopened)';\n        if (open) { jql += openText; }\n        this.searchJira(jql, {}, callback);\n    };\n\n    // ## Add issue to Jira ##\n    // ### Takes ###\n    //\n    // *  issue: Properly Formatted Issue\n    // *  callback: for when it's done\n    //\n    // ### Returns ###\n    // *  error object (check out the Jira Doc)\n    // *  success object\n    //\n    // [Jira Doc](http://docs.atlassian.com/jira/REST/latest/#id290028)\n    this.addNewIssue = function(issue, callback) {\n        var options = {\n            rejectUnauthorized: this.strictSSL,\n            uri: this.makeUri('/issue'),\n            method: 'POST',\n            followAllRedirects: true,\n            json: true,\n            body: issue\n        };\n\n        this.doRequest(options, function(error, response, body) {\n\n            if (error) {\n                callback(error, null);\n                return;\n            }\n\n            if (response.statusCode === 400) {\n                callback(body);\n                return;\n            }\n\n            if ((response.statusCode !== 200) && (response.statusCode !== 201)) {\n                callback(response.statusCode + ': Unable to connect to JIRA during search.');\n                return;\n            }\n\n            callback(null, body);\n\n        });\n    };\n\n    // ## Delete issue to Jira ##\n    // ### Takes ###\n    //\n    // *  issueId: the Id of the issue to delete\n    // *  callback: for when it's done\n    //\n    // ### Returns ###\n    // *  error string\n    // *  success object\n    //\n    // [Jira Doc](http://docs.atlassian.com/jira/REST/latest/#id290791)\n    this.deleteIssue = function(issueNum, callback) {\n        var options = {\n            rejectUnauthorized: this.strictSSL,\n            uri: this.makeUri('/issue/' + issueNum),\n            method: 'DELETE',\n            followAllRedirects: true,\n            json: true\n        };\n\n        this.doRequest(options, function(error, response) {\n\n            if (error) {\n                callback(error, null);\n                return;\n            }\n\n            if (response.statusCode === 204) {\n                callback(null, \"Success\");\n                return;\n            }\n\n            callback(response.statusCode + ': Error while deleting');\n\n        });\n    };\n\n    // ## Update issue in Jira ##\n    // ### Takes ###\n    //\n    // *  issueId: the Id of the issue to delete\n    // *  issueUpdate: update Object\n    // *  callback: for when it's done\n    //\n    // ### Returns ###\n    // *  error string\n    // *  success string\n    //\n    // [Jira Doc](http://docs.atlassian.com/jira/REST/latest/#id290878)\n    this.updateIssue = function(issueNum, issueUpdate, callback) {\n        var options = {\n            rejectUnauthorized: this.strictSSL,\n            uri: this.makeUri('/issue/' + issueNum),\n            body: issueUpdate,\n            method: 'PUT',\n            followAllRedirects: true,\n            json: true\n        };\n\n        this.doRequest(options, function(error, response) {\n\n            if (error) {\n                callback(error, null);\n                return;\n            }\n\n            if (response.statusCode === 200 || response.statusCode === 204) {\n                callback(null, \"Success\");\n                return;\n            }\n\n            callback(response.statusCode + ': Error while updating');\n\n        });\n    };\n\n    // ## List Components ##\n    // ### Takes ###\n    //\n    // *  project: key for the project\n    // *  callback: for when it's done\n    //\n    // ### Returns ###\n    // *  error string\n    // *  array of components\n    //\n    // [Jira Doc](http://docs.atlassian.com/jira/REST/latest/#id290489)\n    /*\n     * [{\n     *     \"self\": \"http://localhostname:8090/jira/rest/api/2.0/component/1234\",\n     *     \"id\": \"1234\",\n     *     \"name\": \"name\",\n     *     \"description\": \"Description.\",\n     *     \"assigneeType\": \"PROJECT_DEFAULT\",\n     *     \"assignee\": {\n     *         \"self\": \"http://localhostname:8090/jira/rest/api/2.0/user?username=user@domain.com\",\n     *         \"name\": \"user@domain.com\",\n     *         \"displayName\": \"SE Support\",\n     *         \"active\": true\n     *     },\n     *     \"realAssigneeType\": \"PROJECT_DEFAULT\",\n     *     \"realAssignee\": {\n     *         \"self\": \"http://localhostname:8090/jira/rest/api/2.0/user?username=user@domain.com\",\n     *         \"name\": \"user@domain.com\",\n     *         \"displayName\": \"User name\",\n     *         \"active\": true\n     *     },\n     *     \"isAssigneeTypeValid\": true\n     * }]\n     */\n    this.listComponents = function(project, callback) {\n        var options = {\n            rejectUnauthorized: this.strictSSL,\n            uri: this.makeUri('/project/' + project + '/components'),\n            method: 'GET',\n            json: true\n        };\n\n        this.doRequest(options, function(error, response, body) {\n\n            if (error) {\n                callback(error, null);\n                return;\n            }\n\n            if (response.statusCode === 200) {\n                callback(null, body);\n                return;\n            }\n            if (response.statusCode === 404) {\n                callback(\"Project not found\");\n                return;\n            }\n\n            callback(response.statusCode + ': Error while updating');\n\n        });\n    };\n\n    // ## List listFields ##\n    // ### Takes ###\n    //\n    // *  callback: for when it's done\n    //\n    // ### Returns ###\n    // *  error string\n    // *  array of priorities\n    //\n    // [Jira Doc](http://docs.atlassian.com/jira/REST/latest/#id290489)\n    /*\n     * [{\n     *    \"id\": \"field\",\n     *    \"name\": \"Field\",\n     *    \"custom\": false,\n     *    \"orderable\": true,\n     *    \"navigable\": true,\n     *    \"searchable\": true,\n     *    \"schema\": {\n     *        \"type\": \"string\",\n     *        \"system\": \"field\"\n     *    }\n     * }]\n     */\n    this.listFields = function(callback) {\n        var options = {\n            rejectUnauthorized: this.strictSSL,\n            uri: this.makeUri('/field'),\n            method: 'GET',\n            json: true\n        };\n\n        this.doRequest(options, function(error, response, body) {\n\n            if (error) {\n                callback(error, null);\n                return;\n            }\n\n            if (response.statusCode === 200) {\n                callback(null, body);\n                return;\n            }\n            if (response.statusCode === 404) {\n                callback(\"Not found\");\n                return;\n            }\n\n            callback(response.statusCode + ': Error while updating');\n\n        });\n    };\n\n    // ## List listPriorities ##\n    // ### Takes ###\n    //\n    // *  callback: for when it's done\n    //\n    // ### Returns ###\n    // *  error string\n    // *  array of priorities\n    //\n    // [Jira Doc](http://docs.atlassian.com/jira/REST/latest/#id290489)\n    /*\n     * [{\n     *    \"self\": \"http://localhostname:8090/jira/rest/api/2.0/priority/1\",\n     *    \"statusColor\": \"#ff3300\",\n     *    \"description\": \"Crashes, loss of data, severe memory leak.\",\n     *    \"name\": \"Major\",\n     *    \"id\": \"2\"\n     * }]\n     */\n    this.listPriorities = function(callback) {\n        var options = {\n            rejectUnauthorized: this.strictSSL,\n            uri: this.makeUri('/priority'),\n            method: 'GET',\n            json: true\n        };\n\n        this.doRequest(options, function(error, response, body) {\n\n            if (error) {\n                callback(error, null);\n                return;\n            }\n\n            if (response.statusCode === 200) {\n                callback(null, body);\n                return;\n            }\n            if (response.statusCode === 404) {\n                callback(\"Not found\");\n                return;\n            }\n\n            callback(response.statusCode + ': Error while updating');\n\n        });\n    };\n\n    // ## List Transitions ##\n    // ### Takes ###\n    //\n    // *  issueId: get transitions available for the issue\n    // *  callback: for when it's done\n    //\n    // ### Returns ###\n    // *  error string\n    // *  array of transitions\n    //\n    // [Jira Doc](http://docs.atlassian.com/jira/REST/latest/#id290489)\n    /*\n     *  {\n     *  \"expand\": \"transitions\",\n     *  \"transitions\": [\n     *      {\n     *          \"id\": \"2\",\n     *          \"name\": \"Close Issue\",\n     *          \"to\": {\n     *              \"self\": \"http://localhostname:8090/jira/rest/api/2.0/status/10000\",\n     *              \"description\": \"The issue is currently being worked on.\",\n     *              \"iconUrl\": \"http://localhostname:8090/jira/images/icons/progress.gif\",\n     *              \"name\": \"In Progress\",\n     *              \"id\": \"10000\"\n     *          },\n     *          \"fields\": {\n     *              \"summary\": {\n     *                  \"required\": false,\n     *                  \"schema\": {\n     *                      \"type\": \"array\",\n     *                      \"items\": \"option\",\n     *                      \"custom\": \"com.atlassian.jira.plugin.system.customfieldtypes:multiselect\",\n     *                      \"customId\": 10001\n     *                  },\n     *                  \"name\": \"My Multi Select\",\n     *                  \"operations\": [\n     *                      \"set\",\n     *                      \"add\"\n     *                  ],\n     *                  \"allowedValues\": [\n     *                      \"red\",\n     *                      \"blue\"\n     *                  ]\n     *              }\n     *          }\n     *      }\n     *  ]}\n     */\n    this.listTransitions = function(issueId, callback) {\n        var options = {\n            rejectUnauthorized: this.strictSSL,\n            uri: this.makeUri('/issue/' + issueId + '/transitions?expand=transitions.fields'),\n            method: 'GET',\n            json: true\n        };\n\n        this.doRequest(options, function(error, response, body) {\n\n            if (error) {\n                callback(error, null);\n                return;\n            }\n\n            if (response.statusCode === 200) {\n                callback(null, body);\n                return;\n            }\n            if (response.statusCode === 404) {\n                callback(\"Issue not found\");\n                return;\n            }\n\n            callback(response.statusCode + ': Error while updating');\n\n        });\n    };\n\n    // ## Transition issue in Jira ##\n    // ### Takes ###\n    //\n    // *  issueId: the Id of the issue to delete\n    // *  issueTransition: transition Object\n    // *  callback: for when it's done\n    //\n    // ### Returns ###\n    // *  error string\n    // *  success string\n    //\n    // [Jira Doc](http://docs.atlassian.com/jira/REST/latest/#id290489)\n    this.transitionIssue = function(issueNum, issueTransition, callback) {\n        var options = {\n            rejectUnauthorized: this.strictSSL,\n            uri: this.makeUri('/issue/' + issueNum + '/transitions'),\n            body: issueTransition,\n            method: 'POST',\n            followAllRedirects: true,\n            json: true\n        };\n\n        this.doRequest(options, function(error, response) {\n\n            if (error) {\n                callback(error, null);\n                return;\n            }\n\n            if (response.statusCode === 204) {\n                callback(null, \"Success\");\n                return;\n            }\n\n            callback(response.statusCode + ': Error while updating');\n\n        });\n    };\n\n    // ## List all Viewable Projects ##\n    // ### Takes ###\n    //\n    // *  callback: for when it's done\n    //\n    // ### Returns ###\n    // *  error string\n    // *  array of projects\n    //\n    // [Jira Doc](http://docs.atlassian.com/jira/REST/latest/#id289193)\n    /*\n     * Result items are in the format:\n     * {\n     *      \"self\": \"http://www.example.com/jira/rest/api/2/project/ABC\",\n     *      \"id\": \"10001\",\n     *      \"key\": \"ABC\",\n     *      \"name\": \"Alphabetical\",\n     *      \"avatarUrls\": {\n     *          \"16x16\": \"http://www.example.com/jira/secure/projectavatar?size=small&pid=10001\",\n     *          \"48x48\": \"http://www.example.com/jira/secure/projectavatar?size=large&pid=10001\"\n     *      }\n     * }\n     */\n    this.listProjects = function(callback) {\n        var options = {\n            rejectUnauthorized: this.strictSSL,\n            uri: this.makeUri('/project'),\n            method: 'GET',\n            json: true\n        };\n\n        this.doRequest(options, function(error, response, body) {\n\n            if (error) {\n                callback(error, null);\n                return;\n            }\n\n            if (response.statusCode === 200) {\n                callback(null, body);\n                return;\n            }\n            if (response.statusCode === 500) {\n                callback(response.statusCode + ': Error while retrieving list.');\n                return;\n            }\n\n            callback(response.statusCode + ': Error while updating');\n\n        });\n    };\n\n    // ## Add a comment to an issue ##\n    // ### Takes ###\n    // *  issueId: Issue to add a comment to\n    // *  comment: string containing comment\n    // *  callback: for when it's done\n    //\n    // ### Returns ###\n    // *  error string\n    // *  success string\n    //\n    // [Jira Doc](https://docs.atlassian.com/jira/REST/latest/#id108798)\n    this.addComment = function(issueId, comment, callback){\n        var options = {\n            rejectUnauthorized: this.strictSSL,\n            uri: this.makeUri('/issue/' + issueId + '/comment'),\n            body: {\n              \"body\": comment\n            },\n            method: 'POST',\n            followAllRedirects: true,\n            json: true\n        };\n\n        this.doRequest(options, function(error, response, body) {\n            if (error) {\n                callback(error, null);\n                return;\n            }\n\n            if (response.statusCode === 201) {\n                callback(null, \"Success\");\n                return;\n            }\n\n            if (response.statusCode === 400) {\n                callback(\"Invalid Fields: \" + JSON.stringify(body));\n                return;\n            };\n            \n            callback(response.statusCode + ': Error while adding comment');\n        });\n    };\n\n    // ## Add a worklog to a project ##\n    // ### Takes ###\n    // *  issueId: Issue to add a worklog to\n    // *  worklog: worklog object\n    // *  callback: for when it's done\n    //\n    // ### Returns ###\n    // *  error string\n    // *  success string\n    //\n    // [Jira Doc](http://docs.atlassian.com/jira/REST/latest/#id291617)\n    /*\n     * Worklog item is in the format:\n     *  {\n     *      \"self\": \"http://www.example.com/jira/rest/api/2.0/issue/10010/worklog/10000\",\n     *      \"author\": {\n     *          \"self\": \"http://www.example.com/jira/rest/api/2.0/user?username=fred\",\n     *          \"name\": \"fred\",\n     *          \"displayName\": \"Fred F. User\",\n     *          \"active\": false\n     *      },\n     *      \"updateAuthor\": {\n     *          \"self\": \"http://www.example.com/jira/rest/api/2.0/user?username=fred\",\n     *          \"name\": \"fred\",\n     *          \"displayName\": \"Fred F. User\",\n     *          \"active\": false\n     *      },\n     *      \"comment\": \"I did some work here.\",\n     *      \"visibility\": {\n     *          \"type\": \"group\",\n     *          \"value\": \"jira-developers\"\n     *      },\n     *      \"started\": \"2012-11-22T04:19:46.736-0600\",\n     *      \"timeSpent\": \"3h 20m\",\n     *      \"timeSpentSeconds\": 12000,\n     *      \"id\": \"100028\"\n     *  }\n     */\n    this.addWorklog = function(issueId, worklog, newEstimate, callback) {\n        if(typeof callback == 'undefined') {\n            callback = newEstimate;\n            newEstimate = false;\n        }\n        var options = {\n            rejectUnauthorized: this.strictSSL,\n            uri: this.makeUri('/issue/' + issueId + '/worklog' + (newEstimate ? \"?adjustEstimate=new&newEstimate=\" + newEstimate : \"\")),\n            body: worklog,\n            method: 'POST',\n            followAllRedirects: true,\n            json: true\n        };\n\n        this.doRequest(options, function(error, response, body) {\n\n            if (error) {\n                callback(error, null);\n                return;\n            }\n\n            if (response.statusCode === 201) {\n                callback(null, \"Success\");\n                return;\n            }\n            if (response.statusCode === 400) {\n                callback(\"Invalid Fields: \" + JSON.stringify(body));\n                return;\n            }\n            if (response.statusCode === 403) {\n                callback(\"Insufficient Permissions\");\n                return;\n            }\n\n            callback(response.statusCode + ': Error while updating');\n\n        });\n    };\n\n    // ## List all Issue Types ##\n    // ### Takes ###\n    //\n    // *  callback: for when it's done\n    //\n    // ### Returns ###\n    // *  error string\n    // *  array of types\n    //\n    // [Jira Doc](http://docs.atlassian.com/jira/REST/latest/#id295946)\n    /*\n     * Result items are in the format:\n     * {\n     *  \"self\": \"http://localhostname:8090/jira/rest/api/2.0/issueType/3\",\n     *  \"id\": \"3\",\n     *  \"description\": \"A task that needs to be done.\",\n     *  \"iconUrl\": \"http://localhostname:8090/jira/images/icons/task.gif\",\n     *  \"name\": \"Task\",\n     *  \"subtask\": false\n     * }\n     */\n    this.listIssueTypes = function(callback) {\n        var options = {\n            rejectUnauthorized: this.strictSSL,\n            uri: this.makeUri('/issuetype'),\n            method: 'GET',\n            json: true\n        };\n\n        this.doRequest(options, function(error, response, body) {\n\n            if (error) {\n                callback(error, null);\n                return;\n            }\n\n            if (response.statusCode === 200) {\n                callback(null, body);\n                return;\n            }\n\n            callback(response.statusCode + ': Error while retrieving issue types');\n\n        });\n    };\n\n    // ## Register a webhook ##\n    // ### Takes ###\n    //\n    // *  webhook: properly formatted webhook\n    // *  callback: for when it's done\n    //\n    // ### Returns ###\n    // *  error string\n    // *  success object\n    //\n    // [Jira Doc](https://developer.atlassian.com/display/JIRADEV/JIRA+Webhooks+Overview)\n    /*\n     * Success object in the format:\n     * {\n     *   name: 'my first webhook via rest',\n     *   events: [],\n     *   url: 'http://www.example.com/webhooks',\n     *   filter: '',\n     *   excludeIssueDetails: false,\n     *   enabled: true,\n     *   self: 'http://localhost:8090/rest/webhooks/1.0/webhook/5',\n     *   lastUpdatedUser: 'user',\n     *   lastUpdatedDisplayName: 'User Name',\n     *   lastUpdated: 1383247225784\n     * }\n     */\n    this.registerWebhook = function(webhook, callback) {\n        var options = {\n            rejectUnauthorized: this.strictSSL,\n            uri: this.makeUri('/webhook', 'rest/webhooks/', '1.0'),\n            method: 'POST',\n            json: true,\n            body: webhook\n        };\n\n        this.request(options, function(error, response, body) {\n\n            if (error) {\n                callback(error, null);\n                return;\n            }\n\n            if (response.statusCode === 201) {\n                callback(null, body);\n                return;\n            }\n\n            callback(response.statusCode + ': Error while registering new webhook');\n\n        });\n    };\n\n    // ## List all registered webhooks ##\n    // ### Takes ###\n    //\n    // *  callback: for when it's done\n    //\n    // ### Returns ###\n    // *  error string\n    // *  array of webhook objects\n    //\n    // [Jira Doc](https://developer.atlassian.com/display/JIRADEV/JIRA+Webhooks+Overview)\n    /*\n     * Webhook object in the format:\n     * {\n     *   name: 'my first webhook via rest',\n     *   events: [],\n     *   url: 'http://www.example.com/webhooks',\n     *   filter: '',\n     *   excludeIssueDetails: false,\n     *   enabled: true,\n     *   self: 'http://localhost:8090/rest/webhooks/1.0/webhook/5',\n     *   lastUpdatedUser: 'user',\n     *   lastUpdatedDisplayName: 'User Name',\n     *   lastUpdated: 1383247225784\n     * }\n     */\n    this.listWebhooks = function(callback) {\n        var options = {\n            rejectUnauthorized: this.strictSSL,\n            uri: this.makeUri('/webhook', 'rest/webhooks/', '1.0'),\n            method: 'GET',\n            json: true\n        };\n\n        this.request(options, function(error, response, body) {\n\n            if (error) {\n                callback(error, null);\n                return;\n            }\n\n            if (response.statusCode === 200) {\n                callback(null, body);\n                return;\n            }\n\n            callback(response.statusCode + ': Error while listing webhooks');\n\n        });\n    };\n\n    // ## Get a webhook by its ID ##\n    // ### Takes ###\n    //\n    // *  webhookID: id of webhook to get\n    // *  callback: for when it's done\n    //\n    // ### Returns ###\n    // *  error string\n    // *  webhook object\n    //\n    // [Jira Doc](https://developer.atlassian.com/display/JIRADEV/JIRA+Webhooks+Overview)\n    this.getWebhook = function(webhookID, callback) {\n        var options = {\n            rejectUnauthorized: this.strictSSL,\n            uri: this.makeUri('/webhook/' + webhookID, 'rest/webhooks/', '1.0'),\n            method: 'GET',\n            json: true\n        };\n\n        this.request(options, function(error, response, body) {\n\n            if (error) {\n                callback(error, null);\n                return;\n            }\n\n            if (response.statusCode === 200) {\n                callback(null, body);\n                return;\n            }\n\n            callback(response.statusCode + ': Error while getting webhook');\n\n        });\n    };\n\n    // ## Delete a registered webhook ##\n    // ### Takes ###\n    //\n    // *  webhookID: id of the webhook to delete\n    // *  callback: for when it's done\n    //\n    // ### Returns ###\n    // *  error string\n    // *  success string\n    //\n    // [Jira Doc](https://developer.atlassian.com/display/JIRADEV/JIRA+Webhooks+Overview)\n    this.deleteWebhook = function(webhookID, callback) {\n        var options = {\n            rejectUnauthorized: this.strictSSL,\n            uri: this.makeUri('/webhook/' + webhookID, 'rest/webhooks/', '1.0'),\n            method: 'DELETE',\n            json: true\n        };\n\n        this.request(options, function(error, response, body) {\n\n            if (error) {\n                callback(error, null);\n                return;\n            }\n\n            if (response.statusCode === 204) {\n                callback(null, \"Success\");\n                return;\n            }\n\n            callback(response.statusCode + ': Error while deleting webhook');\n\n        });\n    };\n\n    // ## Describe the currently authenticated user ##\n    // ### Takes ###\n    //\n    // *  callback: for when it's done\n    //\n    // ### Returns ###\n    // *  error string\n    // *  user object\n    //\n    // [Jira Doc](http://docs.atlassian.com/jira/REST/latest/#id2e865)\n    /*\n     * User object in the format:\n     * {\n     *   self: 'http://localhost:8090/rest/api/latest/user?username=user',\n     *   name: 'user',\n     *   loginInfo:\n     *   {\n     *     failedLoginCount: 2,\n     *     loginCount: 114,\n     *     lastFailedLoginTime: '2013-10-29T13:33:26.702+0000',\n     *     previousLoginTime: '2013-10-31T20:30:51.924+0000'\n     *   }\n     * }\n     */\n    this.getCurrentUser = function(callback) {\n        var options = {\n            rejectUnauthorized: this.strictSSL,\n            uri: this.makeUri('/session', 'rest/auth/', '1'),\n            method: 'GET',\n            json: true\n        };\n\n        this.doRequest(options, function(error, response, body) {\n\n            if (error) {\n                callback(error, null);\n                return;\n            }\n\n            if (response.statusCode === 200) {\n                callback(null, body);\n                return;\n            }\n\n            callback(response.statusCode + ': Error while getting current user');\n\n        });\n    };\n\n    // ## Retrieve the backlog of a certain Rapid View ##\n    // ### Takes ###\n    // *  rapidViewId: rapid view id\n    // *  callback: for when it's done\n    //\n    // ### Returns ###\n    // *  error string\n    // *  backlog object\n    /*\n     * Backlog item is in the format:\n     *  {\n     *      \"sprintMarkersMigrated\": true,\n     *      \"issues\": [\n     *          {\n     *              \"id\": 67890,\n     *              \"key\": \"KEY-1234\",\n     *              \"summary\": \"Issue Summary\",\n     *              ...\n     *          }\n     *      ],\n     *      \"rankCustomFieldId\": 12345,\n     *      \"sprints\": [\n     *          {\n     *              \"id\": 123,\n     *              \"name\": \"Sprint Name\",\n     *              \"state\": \"FUTURE\",\n     *              ...\n     *          }\n     *      ],\n     *      \"supportsPages\": true,\n     *      \"projects\": [\n     *          {\n     *              \"id\": 567,\n     *              \"key\": \"KEY\",\n     *              \"name\": \"Project Name\"\n     *          }\n     *      ],\n     *      \"epicData\": {\n     *          \"epics\": [\n     *              {\n     *                  \"id\": 9876,\n     *                  \"key\": \"KEY-4554\",\n     *                  \"typeName\": \"Epic\",\n     *                  ...\n     *              }\n     *          ],\n     *          \"canEditEpics\": true,\n     *          \"supportsPages\": true\n     *      },\n     *      \"canManageSprints\": true,\n     *      \"maxIssuesExceeded\": false,\n     *      \"queryResultLimit\": 2147483647,\n     *      \"versionData\": {\n     *          \"versionsPerProject\": {\n     *              \"567\": [\n     *                  {\n     *                      \"id\": 8282,\n     *                      \"name\": \"Version Name\",\n     *                      ...\n     *                  }\n     *              ]\n     *          },\n     *          \"canCreateVersion\": true\n     *      }\n     *  }\n     */\n    this.getBacklogForRapidView = function(rapidViewId, callback) {\n        var options = {\n            rejectUnauthorized: this.strictSSL,\n            uri: this.makeUri('/xboard/plan/backlog/data?rapidViewId=' + rapidViewId, 'rest/greenhopper/'),\n            method: 'GET',\n            json: true\n        };\n\n        this.doRequest(options, function(error, response) {\n            if (error) {\n                callback(error, null);\n\n                return;\n            }\n\n            if (response.statusCode === 200) {\n                callback(null, response.body);\n\n                return;\n            }\n\n            callback(response.statusCode + ': Error while retrieving backlog');\n        });\n    };\n\n}).call(JiraApi.prototype);\n","/home/travis/build/npmtest/node-npmtest-jira/node_modules/jira/Gruntfile.js":"module.exports = function (grunt) {\n  \"use strict\";\n  // Project configuration.\n  grunt.initConfig({\n    pkg: '<json:package.json>',\n    jasmine_node: {\n      all: [\"./spec\"],\n      options: {\n        forceExit: false,\n        extensions: 'coffee',\n        jUnit: {\n          report: false,\n          savePath : \"./build/reports/jasmine/\",\n          useDotNotation: true,\n          consolidate: true\n        }\n      }\n    },\n    docco: {\n      app: {\n        src: ['lib/*.js']\n      }\n    },\n    watch: {\n      files: ['lib/**/*.js', 'spec/**/*.coffee'],\n      tasks: 'default'\n    },\n    jslint: {\n      client: {\n        src: ['./Gruntfile.js', 'lib/**/*.js'],\n        directives: {\n          indent: 2,\n          curly: true,\n          eqeqeq: true,\n          eqnull: true,\n          immed: true,\n          latedef: true,\n          newcap: true,\n          noarg: true,\n          sub: true,\n          undef: true,\n          unused: true,\n          boss: true,\n          browser: true,\n          predef: ['module', 'require', 'console', 'exports']\n        }\n      }\n    }\n  });\n\n  // Default task.\n  grunt.registerTask('default', ['jslint', 'jasmine_node', 'docco']);\n  grunt.registerTask('prepare', 'default bump');\n  grunt.registerTask('test', 'jasmine_node');\n\n  grunt.loadNpmTasks('grunt-jasmine-node');\n  grunt.loadNpmTasks('grunt-docco');\n  grunt.loadNpmTasks('grunt-bump');\n  grunt.loadNpmTasks('grunt-jslint');\n};\n"}